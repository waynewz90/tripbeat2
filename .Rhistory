addAwesomeMarkers(lng=geocodes2_hotel$lon, lat=geocodes2_hotel$lat, icon=icons_hotel, label=geocodes2_hotel$place, popup=geocodes2_hotel$comments)
p
#Orange -> Food
#Blue -> Attractions
#Star -> Priority Food or Priority Attraction
View(places)
geocodes = data.frame(matrix(vector(), 0, 3, dimnames=list(c(), c("place", "lat", "lon"))), stringsAsFactors=FALSE)
for(temp_place in places$place){
print(temp_place)
result <- google_geocode(address = c(paste(temp_place, city, sep = ", ")), simplify = TRUE)
if(result$status == 'OK'){
temp_lat <- result$results$geometry$location$lat[1]
temp_lon <- result$results$geometry$location$lng[1]
} else {
print("Error in result")
temp_lat <- NULL
temp_lon <-NULL
}
new_row <- list(place=temp_place, lat=temp_lat, lon=temp_lon)
geocodes <- rbind (geocodes, new_row)
}
View(geocodes)
geocodes2 <- merge(x = places, y = geocodes, by = "place", all.x = TRUE)
geocodes2_hotel <- droplevels(filter(geocodes2, hotel == 1))
geocodes2_food <- droplevels(filter(geocodes2, food == 1))
geocodes2_attractions <- droplevels(filter(geocodes2, (food != 1) & (hotel != 1)))
getSymbol <- function(geocodes2) {
sapply(geocodes2$priority, function(priority) {
if(priority == 1) {
"star"
}  else {
""
}})
}
icons_attractions <- awesomeIcons(
icon = getSymbol(geocodes2_attractions),
markerColor = 'blue'
)
icons_food <- awesomeIcons(
icon = getSymbol(geocodes2_food),
markerColor = 'orange'
)
icons_hotel <- awesomeIcons(
icon = 'home',
markerColor = 'red'
)
p <- leaflet() %>%
addTiles() %>%
addAwesomeMarkers(lng=geocodes2_attractions$lon, lat=geocodes2_attractions$lat, icon=icons_attractions, label=geocodes2_attractions$place, popup=geocodes2_attractions$comments) %>%
addAwesomeMarkers(lng=geocodes2_food$lon, lat=geocodes2_food$lat, icon=icons_food, label=geocodes2_food$place, popup=geocodes2_food$comments) %>%
addAwesomeMarkers(lng=geocodes2_hotel$lon, lat=geocodes2_hotel$lat, icon=icons_hotel, label=geocodes2_hotel$place, popup=geocodes2_hotel$comments)
p
View(geocodes2_hotel)
#------------- APPLICATION -----------
gs_ls()
ss <- gs_title("Europe Planning")
gs_places <- gs_read(ss=ss, ws = city)
places <- as.data.frame(gs_places)
# places <- read.csv("places.csv", header=TRUE, stringsAsFactors = FALSE)
places$food[is.na(places$food)] <- 0
places$priority[is.na(places$priority)] <- 0
places$hotel[is.na(places$hotel)] <- 0
#Initialize empty dataframe
geocodes = data.frame(matrix(vector(), 0, 3, dimnames=list(c(), c("place", "lat", "lon"))), stringsAsFactors=FALSE)
for(temp_place in places$place){
print(temp_place)
result <- google_geocode(address = c(paste(temp_place, city, sep = ", ")), simplify = TRUE)
if(result$status == 'OK'){
temp_lat <- result$results$geometry$location$lat[1]
temp_lon <- result$results$geometry$location$lng[1]
} else {
print("Error in result")
temp_lat <- NULL
temp_lon <-NULL
}
new_row <- list(place=temp_place, lat=temp_lat, lon=temp_lon)
geocodes <- rbind (geocodes, new_row)
}
#Left join original places dataframe, with geocodes dataframe
geocodes2 <- merge(x = places, y = geocodes, by = "place", all.x = TRUE)
geocodes2_hotel <- droplevels(filter(geocodes2, hotel == 1))
geocodes2_food <- droplevels(filter(geocodes2, food == 1))
geocodes2_attractions <- droplevels(filter(geocodes2, (food != 1) & (hotel != 1)))
#Using color to differentiate between attraction/food, and symbol as priority
getSymbol <- function(geocodes2) {
sapply(geocodes2$priority, function(priority) {
if(priority == 1) {
"star"
}  else {
""
}})
}
icons_attractions <- awesomeIcons(
icon = getSymbol(geocodes2_attractions),
markerColor = 'blue'
)
icons_food <- awesomeIcons(
icon = getSymbol(geocodes2_food),
markerColor = 'orange'
)
icons_hotel <- awesomeIcons(
icon = 'home',
markerColor = 'red'
)
p <- leaflet() %>%
addTiles() %>%
addAwesomeMarkers(lng=geocodes2_attractions$lon, lat=geocodes2_attractions$lat, icon=icons_attractions, label=geocodes2_attractions$place, popup=geocodes2_attractions$comments) %>%
addAwesomeMarkers(lng=geocodes2_food$lon, lat=geocodes2_food$lat, icon=icons_food, label=geocodes2_food$place, popup=geocodes2_food$comments) %>%
addAwesomeMarkers(lng=geocodes2_hotel$lon, lat=geocodes2_hotel$lat, icon=icons_hotel, label=geocodes2_hotel$place, popup=geocodes2_hotel$comments)
p
#Orange -> Food
#Blue -> Attractions
#Star -> Priority Food or Priority Attraction
test <- google_geocode(address = c(paste("Duck and Waffle", city, sep = ", ")), simplify = TRUE)
test
test <- google_geocode(address = c(paste("Duck & Waffle", city, sep = ", ")), simplify = TRUE)
test
paste("Duck & Waffle", city, sep = ", ")
city <- 'London'
#------------- APPLICATION -----------
gs_ls()
ss <- gs_title("Europe Planning")
gs_places <- gs_read(ss=ss, ws = city)
places <- as.data.frame(gs_places)
# places <- read.csv("places.csv", header=TRUE, stringsAsFactors = FALSE)
places$food[is.na(places$food)] <- 0
places$priority[is.na(places$priority)] <- 0
places$hotel[is.na(places$hotel)] <- 0
#Initialize empty dataframe
geocodes = data.frame(matrix(vector(), 0, 3, dimnames=list(c(), c("place", "lat", "lon"))), stringsAsFactors=FALSE)
for(temp_place in places$place){
print(temp_place)
result <- google_geocode(address = c(paste(temp_place, city, sep = ", ")), simplify = TRUE)
if(result$status == 'OK'){
temp_lat <- result$results$geometry$location$lat[1]
temp_lon <- result$results$geometry$location$lng[1]
} else {
print("Error in result")
temp_lat <- NULL
temp_lon <-NULL
}
new_row <- list(place=temp_place, lat=temp_lat, lon=temp_lon)
geocodes <- rbind (geocodes, new_row)
}
#Left join original places dataframe, with geocodes dataframe
geocodes2 <- merge(x = places, y = geocodes, by = "place", all.x = TRUE)
geocodes2_hotel <- droplevels(filter(geocodes2, hotel == 1))
geocodes2_food <- droplevels(filter(geocodes2, food == 1))
geocodes2_attractions <- droplevels(filter(geocodes2, (food != 1) & (hotel != 1)))
#Using color to differentiate between attraction/food, and symbol as priority
getSymbol <- function(geocodes2) {
sapply(geocodes2$priority, function(priority) {
if(priority == 1) {
"star"
}  else {
""
}})
}
icons_attractions <- awesomeIcons(
icon = getSymbol(geocodes2_attractions),
markerColor = 'blue'
)
icons_food <- awesomeIcons(
icon = getSymbol(geocodes2_food),
markerColor = 'orange'
)
icons_hotel <- awesomeIcons(
icon = 'home',
markerColor = 'red'
)
p <- leaflet() %>%
addTiles() %>%
addAwesomeMarkers(lng=geocodes2_attractions$lon, lat=geocodes2_attractions$lat, icon=icons_attractions, label=geocodes2_attractions$place, popup=geocodes2_attractions$comments) %>%
addAwesomeMarkers(lng=geocodes2_food$lon, lat=geocodes2_food$lat, icon=icons_food, label=geocodes2_food$place, popup=geocodes2_food$comments) %>%
addAwesomeMarkers(lng=geocodes2_hotel$lon, lat=geocodes2_hotel$lat, icon=icons_hotel, label=geocodes2_hotel$place, popup=geocodes2_hotel$comments)
p
#Orange -> Food
#Blue -> Attractions
#Star -> Priority Food or Priority Attraction
#Used in getting geocodes
#Used in identifying relevant worksheet in Google Sheet
city <- 'London'
country <- 'UK'
components <- data.frame(component = c("country"), value = c(country))
#------------- APPLICATION -----------
gs_ls()
ss <- gs_title("Europe Planning")
gs_places <- gs_read(ss=ss, ws = city)
places <- as.data.frame(gs_places)
# places <- read.csv("places.csv", header=TRUE, stringsAsFactors = FALSE)
places$food[is.na(places$food)] <- 0
places$priority[is.na(places$priority)] <- 0
places$hotel[is.na(places$hotel)] <- 0
#Initialize empty dataframe
geocodes = data.frame(matrix(vector(), 0, 3, dimnames=list(c(), c("place", "lat", "lon"))), stringsAsFactors=FALSE)
for(temp_place in places$place){
print(temp_place)
result <- google_geocode(address = c(paste(temp_place, city, sep = ", ")), components = components, simplify = TRUE)
if(result$status == 'OK'){
temp_lat <- result$results$geometry$location$lat[1]
temp_lon <- result$results$geometry$location$lng[1]
} else {
print("Error in result")
temp_lat <- NULL
temp_lon <-NULL
}
new_row <- list(place=temp_place, lat=temp_lat, lon=temp_lon)
geocodes <- rbind (geocodes, new_row)
}
#Left join original places dataframe, with geocodes dataframe
geocodes2 <- merge(x = places, y = geocodes, by = "place", all.x = TRUE)
geocodes2_hotel <- droplevels(filter(geocodes2, hotel == 1))
geocodes2_food <- droplevels(filter(geocodes2, food == 1))
geocodes2_attractions <- droplevels(filter(geocodes2, (food != 1) & (hotel != 1)))
#Using color to differentiate between attraction/food, and symbol as priority
getSymbol <- function(geocodes2) {
sapply(geocodes2$priority, function(priority) {
if(priority == 1) {
"star"
}  else {
""
}})
}
icons_attractions <- awesomeIcons(
icon = getSymbol(geocodes2_attractions),
markerColor = 'blue'
)
icons_food <- awesomeIcons(
icon = getSymbol(geocodes2_food),
markerColor = 'orange'
)
icons_hotel <- awesomeIcons(
icon = 'home',
markerColor = 'red'
)
p <- leaflet() %>%
addTiles() %>%
addAwesomeMarkers(lng=geocodes2_attractions$lon, lat=geocodes2_attractions$lat, icon=icons_attractions, label=geocodes2_attractions$place, popup=geocodes2_attractions$comments) %>%
addAwesomeMarkers(lng=geocodes2_food$lon, lat=geocodes2_food$lat, icon=icons_food, label=geocodes2_food$place, popup=geocodes2_food$comments) %>%
addAwesomeMarkers(lng=geocodes2_hotel$lon, lat=geocodes2_hotel$lat, icon=icons_hotel, label=geocodes2_hotel$place, popup=geocodes2_hotel$comments)
p
#Orange -> Food
#Blue -> Attractions
#Star -> Priority Food or Priority Attraction
#Used in getting geocodes
#Used in identifying relevant worksheet in Google Sheet
city <- 'Barcelona'
country <- 'ES'
components <- data.frame(component = c("country"), value = c(country))
#------------- APPLICATION -----------
gs_ls()
ss <- gs_title("Europe Planning")
gs_places <- gs_read(ss=ss, ws = city)
places <- as.data.frame(gs_places)
# places <- read.csv("places.csv", header=TRUE, stringsAsFactors = FALSE)
places$food[is.na(places$food)] <- 0
places$priority[is.na(places$priority)] <- 0
places$hotel[is.na(places$hotel)] <- 0
#Initialize empty dataframe
geocodes = data.frame(matrix(vector(), 0, 3, dimnames=list(c(), c("place", "lat", "lon"))), stringsAsFactors=FALSE)
for(temp_place in places$place){
print(temp_place)
result <- google_geocode(address = c(paste(temp_place, city, sep = ", ")), components = components, simplify = TRUE)
if(result$status == 'OK'){
temp_lat <- result$results$geometry$location$lat[1]
temp_lon <- result$results$geometry$location$lng[1]
} else {
print("Error in result")
temp_lat <- NULL
temp_lon <-NULL
}
new_row <- list(place=temp_place, lat=temp_lat, lon=temp_lon)
geocodes <- rbind (geocodes, new_row)
}
#Left join original places dataframe, with geocodes dataframe
geocodes2 <- merge(x = places, y = geocodes, by = "place", all.x = TRUE)
geocodes2_hotel <- droplevels(filter(geocodes2, hotel == 1))
geocodes2_food <- droplevels(filter(geocodes2, food == 1))
geocodes2_attractions <- droplevels(filter(geocodes2, (food != 1) & (hotel != 1)))
#Using color to differentiate between attraction/food, and symbol as priority
getSymbol <- function(geocodes2) {
sapply(geocodes2$priority, function(priority) {
if(priority == 1) {
"star"
}  else {
""
}})
}
icons_attractions <- awesomeIcons(
icon = getSymbol(geocodes2_attractions),
markerColor = 'blue'
)
icons_food <- awesomeIcons(
icon = getSymbol(geocodes2_food),
markerColor = 'orange'
)
icons_hotel <- awesomeIcons(
icon = 'home',
markerColor = 'red'
)
p <- leaflet() %>%
addTiles() %>%
addAwesomeMarkers(lng=geocodes2_attractions$lon, lat=geocodes2_attractions$lat, icon=icons_attractions, label=geocodes2_attractions$place, popup=geocodes2_attractions$comments) %>%
addAwesomeMarkers(lng=geocodes2_food$lon, lat=geocodes2_food$lat, icon=icons_food, label=geocodes2_food$place, popup=geocodes2_food$comments) %>%
addAwesomeMarkers(lng=geocodes2_hotel$lon, lat=geocodes2_hotel$lat, icon=icons_hotel, label=geocodes2_hotel$place, popup=geocodes2_hotel$comments)
p
#Orange -> Food
#Blue -> Attractions
#Star -> Priority Food or Priority Attraction
city <- 'Barcelona'
country <- 'ES'
components <- data.frame(component = c("country"), value = c(country))
#------------- APPLICATION -----------
gs_ls()
city <- 'Barcelona'
country <- 'ES'
components <- data.frame(component = c("country"), value = c(country))
#------------- APPLICATION -----------
gs_ls()
ss <- gs_title("Europe Planning")
gs_places <- gs_read(ss=ss, ws = city)
city <- 'Barcelona'
country <- 'ES'
components <- data.frame(component = c("country"), value = c(country))
#------------- APPLICATION -----------
gs_ls()
ss <- gs_title("Europe Planning")
gs_places <- gs_read(ss=ss, ws = city)
places <- as.data.frame(gs_places)
# places <- read.csv("places.csv", header=TRUE, stringsAsFactors = FALSE)
places$food[is.na(places$food)] <- 0
places$priority[is.na(places$priority)] <- 0
places$hotel[is.na(places$hotel)] <- 0
#Initialize empty dataframe
geocodes = data.frame(matrix(vector(), 0, 3, dimnames=list(c(), c("place", "lat", "lon"))), stringsAsFactors=FALSE)
for(temp_place in places$place){
print(temp_place)
result <- google_geocode(address = c(paste(temp_place, city, sep = ", ")), components = components, simplify = TRUE)
if(result$status == 'OK'){
temp_lat <- result$results$geometry$location$lat[1]
temp_lon <- result$results$geometry$location$lng[1]
} else {
print("Error in result")
temp_lat <- NULL
temp_lon <-NULL
}
new_row <- list(place=temp_place, lat=temp_lat, lon=temp_lon)
geocodes <- rbind (geocodes, new_row)
}
#Left join original places dataframe, with geocodes dataframe
geocodes2 <- merge(x = places, y = geocodes, by = "place", all.x = TRUE)
geocodes2_hotel <- droplevels(filter(geocodes2, hotel == 1))
geocodes2_food <- droplevels(filter(geocodes2, food == 1))
geocodes2_attractions <- droplevels(filter(geocodes2, (food != 1) & (hotel != 1)))
#Using color to differentiate between attraction/food, and symbol as priority
getSymbol <- function(geocodes2) {
sapply(geocodes2$priority, function(priority) {
if(priority == 1) {
"star"
}  else {
""
}})
}
icons_attractions <- awesomeIcons(
icon = getSymbol(geocodes2_attractions),
markerColor = 'blue'
)
icons_food <- awesomeIcons(
icon = getSymbol(geocodes2_food),
markerColor = 'orange'
)
icons_hotel <- awesomeIcons(
icon = 'home',
markerColor = 'red'
)
p <- leaflet() %>%
addTiles() %>%
addAwesomeMarkers(lng=geocodes2_attractions$lon, lat=geocodes2_attractions$lat, icon=icons_attractions, label=geocodes2_attractions$place, popup=geocodes2_attractions$comments) %>%
addAwesomeMarkers(lng=geocodes2_food$lon, lat=geocodes2_food$lat, icon=icons_food, label=geocodes2_food$place, popup=geocodes2_food$comments) %>%
addAwesomeMarkers(lng=geocodes2_hotel$lon, lat=geocodes2_hotel$lat, icon=icons_hotel, label=geocodes2_hotel$place, popup=geocodes2_hotel$comments)
p
#Orange -> Food
#Blue -> Attractions
#Star -> Priority Food or Priority Attraction
city <- 'Barcelona'
country <- 'ES'
components <- data.frame(component = c("country"), value = c(country))
#------------- APPLICATION -----------
gs_ls()
ss <- gs_title("Europe Planning")
gs_places <- gs_read(ss=ss, ws = city)
places <- as.data.frame(gs_places)
# places <- read.csv("places.csv", header=TRUE, stringsAsFactors = FALSE)
places$food[is.na(places$food)] <- 0
places$priority[is.na(places$priority)] <- 0
places$hotel[is.na(places$hotel)] <- 0
#Initialize empty dataframe
geocodes = data.frame(matrix(vector(), 0, 3, dimnames=list(c(), c("place", "lat", "lon"))), stringsAsFactors=FALSE)
for(temp_place in places$place){
print(temp_place)
result <- google_geocode(address = c(paste(temp_place, city, sep = ", ")), components = components, simplify = TRUE)
if(result$status == 'OK'){
temp_lat <- result$results$geometry$location$lat[1]
temp_lon <- result$results$geometry$location$lng[1]
} else {
print("Error in result")
temp_lat <- NULL
temp_lon <-NULL
}
new_row <- list(place=temp_place, lat=temp_lat, lon=temp_lon)
geocodes <- rbind (geocodes, new_row)
}
#Left join original places dataframe, with geocodes dataframe
geocodes2 <- merge(x = places, y = geocodes, by = "place", all.x = TRUE)
geocodes2_hotel <- droplevels(filter(geocodes2, hotel == 1))
geocodes2_food <- droplevels(filter(geocodes2, food == 1))
geocodes2_attractions <- droplevels(filter(geocodes2, (food != 1) & (hotel != 1)))
#Using color to differentiate between attraction/food, and symbol as priority
getSymbol <- function(geocodes2) {
sapply(geocodes2$priority, function(priority) {
if(priority == 1) {
"star"
}  else {
""
}})
}
icons_attractions <- awesomeIcons(
icon = getSymbol(geocodes2_attractions),
markerColor = 'blue'
)
icons_food <- awesomeIcons(
icon = getSymbol(geocodes2_food),
markerColor = 'orange'
)
icons_hotel <- awesomeIcons(
icon = 'home',
markerColor = 'red'
)
p <- leaflet() %>%
addTiles() %>%
addAwesomeMarkers(lng=geocodes2_attractions$lon, lat=geocodes2_attractions$lat, icon=icons_attractions, label=geocodes2_attractions$place, popup=geocodes2_attractions$comments) %>%
addAwesomeMarkers(lng=geocodes2_food$lon, lat=geocodes2_food$lat, icon=icons_food, label=geocodes2_food$place, popup=geocodes2_food$comments) %>%
addAwesomeMarkers(lng=geocodes2_hotel$lon, lat=geocodes2_hotel$lat, icon=icons_hotel, label=geocodes2_hotel$place, popup=geocodes2_hotel$comments)
p
#Orange -> Food
#Blue -> Attractions
#Star -> Priority Food or Priority Attraction
#Used in getting geocodes
#Used in identifying relevant worksheet in Google Sheet
city <- 'Paris'
country <- 'FR'
components <- data.frame(component = c("country"), value = c(country))
#------------- APPLICATION -----------
gs_ls()
ss <- gs_title("Europe Planning")
gs_places <- gs_read(ss=ss, ws = city)
places <- as.data.frame(gs_places)
# places <- read.csv("places.csv", header=TRUE, stringsAsFactors = FALSE)
places$food[is.na(places$food)] <- 0
places$priority[is.na(places$priority)] <- 0
places$hotel[is.na(places$hotel)] <- 0
#Initialize empty dataframe
geocodes = data.frame(matrix(vector(), 0, 3, dimnames=list(c(), c("place", "lat", "lon"))), stringsAsFactors=FALSE)
for(temp_place in places$place){
print(temp_place)
result <- google_geocode(address = c(paste(temp_place, city, sep = ", ")), components = components, simplify = TRUE)
if(result$status == 'OK'){
temp_lat <- result$results$geometry$location$lat[1]
temp_lon <- result$results$geometry$location$lng[1]
} else {
print("Error in result")
temp_lat <- NULL
temp_lon <-NULL
}
new_row <- list(place=temp_place, lat=temp_lat, lon=temp_lon)
geocodes <- rbind (geocodes, new_row)
}
#Left join original places dataframe, with geocodes dataframe
geocodes2 <- merge(x = places, y = geocodes, by = "place", all.x = TRUE)
geocodes2_hotel <- droplevels(filter(geocodes2, hotel == 1))
geocodes2_food <- droplevels(filter(geocodes2, food == 1))
geocodes2_attractions <- droplevels(filter(geocodes2, (food != 1) & (hotel != 1)))
#Using color to differentiate between attraction/food, and symbol as priority
getSymbol <- function(geocodes2) {
sapply(geocodes2$priority, function(priority) {
if(priority == 1) {
"star"
}  else {
""
}})
}
icons_attractions <- awesomeIcons(
icon = getSymbol(geocodes2_attractions),
markerColor = 'blue'
)
icons_food <- awesomeIcons(
icon = getSymbol(geocodes2_food),
markerColor = 'orange'
)
icons_hotel <- awesomeIcons(
icon = 'home',
markerColor = 'red'
)
p <- leaflet() %>%
addTiles() %>%
addAwesomeMarkers(lng=geocodes2_attractions$lon, lat=geocodes2_attractions$lat, icon=icons_attractions, label=geocodes2_attractions$place, popup=geocodes2_attractions$comments) %>%
addAwesomeMarkers(lng=geocodes2_food$lon, lat=geocodes2_food$lat, icon=icons_food, label=geocodes2_food$place, popup=geocodes2_food$comments) %>%
addAwesomeMarkers(lng=geocodes2_hotel$lon, lat=geocodes2_hotel$lat, icon=icons_hotel, label=geocodes2_hotel$place, popup=geocodes2_hotel$comments)
p
#Orange -> Food
#Blue -> Attractions
#Star -> Priority Food or Priority Attraction
